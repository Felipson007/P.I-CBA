import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import os

# --- CONFIGURA√á√ÉO ---
NOME_ARQUIVO_CSV = 'glassdoor_reviews.csv'
# --------------------


def analisar_reviews(nome_arquivo_csv):
    """
    L√™ um arquivo CSV de reviews do Glassdoor e gera um relat√≥rio de an√°lise
    com gr√°ficos e nuvens de palavras.
    """
    print(f"--- Iniciando a an√°lise do arquivo: {nome_arquivo_csv} ---")

    # Verifica se o arquivo existe antes de continuar
    if not os.path.exists(nome_arquivo_csv):
        print(f"‚ùå ERRO CR√çTICO: Arquivo '{nome_arquivo_csv}' n√£o encontrado!")
        print("Por favor, verifique se o script 'analisador.py' est√° na MESMA PASTA que o seu arquivo CSV.")
        return # Para a execu√ß√£o
        
    # 1. Carregar os dados do arquivo CSV
    df = pd.read_csv(nome_arquivo_csv)
    print("‚úÖ Arquivo CSV carregado com sucesso.")

    # 2. Limpeza e Prepara√ß√£o dos Dados
    colunas_rating = [
        'rating', 'culture_and_values_rating', 'diversity_and_inclusion_rating',
        'work_life_balance_rating', 'senior_management_rating',
        'compensation_and_benefits_rating', 'career_opportunities_rating'
    ]
    # Converte colunas de avalia√ß√£o para n√∫mero, tratando erros
    for col in colunas_rating:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Remove linhas onde a avalia√ß√£o principal ('rating') n√£o existe
    df.dropna(subset=['rating'], inplace=True)
    
    # Limpa a coluna de localiza√ß√£o para agrupar melhor os dados (ex: "S√£o Paulo, " vira "S√£o Paulo")
    if 'location' in df.columns:
        df['location'] = df['location'].str.strip().str.replace(',','')
    
    print("‚úÖ Dados limpos e preparados para an√°lise.")

    # 3. An√°lise Quantitativa (Resultados no Console)
    print("\n" + "="*40)
    print("üìä AN√ÅLISE QUANTITATIVA")
    print("="*40)
    
    media_ratings = df[colunas_rating].mean().sort_values(ascending=False)
    print("\n--- M√©dia das Avalia√ß√µes (de 0 a 5) ---")
    print(media_ratings.round(2))
    
    print("\n--- Distribui√ß√£o da Nota Geral ('rating') ---")
    print(df['rating'].value_counts().sort_index())

    # 4. Gera√ß√£o de Gr√°ficos e Nuvens de Palavras
    print("\n" + "="*40)
    print("üé® GERANDO VISUALIZA√á√ïES (ARQUIVOS .PNG)")
    print("="*40)

    # Gr√°fico 1: M√©dias Gerais
    plt.figure(figsize=(12, 8))
    sns.barplot(x=media_ratings.values, y=media_ratings.index, orient='h', palette='viridis')
    plt.title('M√©dia Geral por Categoria de Avalia√ß√£o', fontsize=16, weight='bold')
    plt.xlabel('M√©dia da Nota (0-5)', fontsize=12)
    plt.ylabel('')
    plt.xlim(0, 5) # Garante que a escala do eixo X vai de 0 a 5
    plt.tight_layout()
    plt.savefig('grafico_medias_gerais.png')
    print("‚úÖ Gr√°fico 'grafico_medias_gerais.png' foi salvo!")

    # Gr√°fico 2: M√©dia por Localidade (se a coluna existir)
    if 'location' in df.columns and not df['location'].isnull().all():
        media_por_local = df.groupby('location')['rating'].mean().nlargest(10).sort_values(ascending=True)
        plt.figure(figsize=(12, 8))
        sns.barplot(x=media_por_local.values, y=media_por_local.index, orient='h', palette='plasma')
        plt.title('Top 10 Localidades com Melhor M√©dia de Avalia√ß√£o', fontsize=16, weight='bold')
        plt.xlabel('M√©dia da Nota', fontsize=12)
        plt.ylabel('Localidade', fontsize=12)
        plt.tight_layout()
        plt.savefig('grafico_media_por_localidade.png')
        print("‚úÖ Gr√°fico 'grafico_media_por_localidade.png' foi salvo!")

    # Nuvem de Palavras 1: Pontos Positivos
    # Junta todos os textos da coluna 'pros', ignorando os que estiverem vazios
    texto_pros = " ".join(review for review in df.pros.dropna())
    if texto_pros:
        wordcloud_pros = WordCloud(width=1200, height=600, background_color='white', collocations=False).generate(texto_pros)
        plt.figure(figsize=(15, 8))
        plt.imshow(wordcloud_pros, interpolation='bilinear')
        plt.axis("off")
        plt.title('Principais Pontos Positivos Mencionados', fontsize=20, weight='bold')
        plt.tight_layout()
        plt.savefig('nuvem_pontos_positivos.png')
        print("‚úÖ Nuvem de palavras 'nuvem_pontos_positivos.png' foi salva!")

    # Nuvem de Palavras 2: Pontos Negativos
    texto_cons = " ".join(review for review in df.cons.dropna())
    if texto_cons:
        wordcloud_cons = WordCloud(width=1200, height=600, background_color='black', colormap='Reds', collocations=False).generate(texto_cons)
        plt.figure(figsize=(15, 8))
        plt.imshow(wordcloud_cons, interpolation='bilinear')
        plt.axis("off")
        plt.title('Principais Pontos Negativos Mencionados', fontsize=20, weight='bold')
        plt.tight_layout()
        plt.savefig('nuvem_pontos_negativos.png')
        print("‚úÖ Nuvem de palavras 'nuvem_pontos_negativos.png' foi salva!")

    print("\n--- An√°lise Conclu√≠da! Verifique os arquivos .png na pasta. ---")


# --- PONTO DE PARTIDA DO SCRIPT ---
if __name__ == '__main__':
    analisar_reviews(NOME_ARQUIVO_CSV)